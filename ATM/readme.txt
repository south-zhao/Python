需要注意的第一件事：
    创建一个项目，会在一个单独的文件夹里面
    避免：项目建立在python pycharm安装目录
创建这个文件夹，以后，这个项目的代码都在这个文件夹里面，方便我们的管理

从0开始创建一个项目都会经历那些过程呢？
一个项目是如何从无到有的：
    一 需求分析
        1. 拿到项目，会先去客户那里一起讨论需求(非常重要)
            商量项目的功能是否能实现，周期与价格，得到一份需求文档
            需求文档(文字的形式定下来 都要作什么功能  确保利益)
        客户他是不懂技术:领导灵魂三拍： 拍脑袋做决定  拍胸脯作保证  拍屁股就走人
        2. 回到公司内部讨论，得到一个开发文档(比较明确你自己的任务是什么？)
            交给不同岗位的员工去做对应的事情
            程序开发公司  分为不同的岗位的
            1. 产品经理   负责发需求的   (产品狗)
            2. UI界面设计师  (美工)
                设计程序的布局，外观  根据外观做出一张张的图片
            3. 前端
                拿到UI交给他的图片，去搭建软件
                设计一些这个软件中，那些地方需要有数据，需要进行数据的交互
                前端负责的是数据的展示功能，如何更好的更美观的展示数据
            4. 后端
                真正的直接的核心的业务逻辑，调度前端和数据库进行数据的操作
                分不同的编程语言
            5. 测试
                会给你的代码进行测试  比如压力测试  界面测试  (找bug)
            6. 运维
                部署项目的

程序的架构设计
    1. 程序设计的好处
        1. 思路清晰
        2. 不会出现写到一半要推翻重写的情况
        3. 方便自己或者你的同事更好的维护
    2. 我们常用的架构设计  ：三层结构 (这是个思想，跨越语言的)

去大排档吃饭，流程
    1. 问客人吃什么      蛋炒饭
    2. 去做饭
问题：注定了做不大
做大做强，再创辉煌   饭店
1. 服务员    只负责和客人打交道，得到客户的需求，将这个需求告诉大堂经理
2. 大堂经理  对服务员告诉他的客人的需求进行处理
3. 厨师      对大堂经理提出的菜  进行制作  将做好的菜 交给大堂经理

这样一划分  有个什么好处？
客人  《===》 服务员 《===》 大堂经理 《===》厨师
1. 分工明确 ，只需要做好自己的事情
2. 效率高
3. 管理方便
4. 其中一个环节变动，不影响整体
编程  三层结构
1. 视图层    负责和用户打交道  接受用户的输入  将用户的输入的结果交给
            逻辑层
            将逻辑层的结果交给用户
2. 逻辑层    接受视图层的结果 进行处理  将处理后的结果交给视图层
            接受数据层的结果 进行处理  和数据层打交道  接受结构给视图层
3. 数据层    接受逻辑层的结果  保存数据  将结果给逻辑层
三层结构的好处
    1. 将每个功能都分为三个部分，逻辑更清晰了
    2. 如果用户更换了不同的用户界面，或不同的数据保存的方式
        都不会影响整个程序的运行  扩展性很强

了解为什么要分三层  这个的好处  在之后敲代码的时候 感受的更明显

搭建我们项目的目录结构了
为什么一个软件不是一份文件，而是很多份文件？
大部分的项目 都会有如下的目录结构
ATM
    readme.txt     说明文件  类似于说明书
    bin
        start.py    启动文件   运行这个文件，这个程序就启动了，
    conf
        settings.py   配置文件   保存的是这个程序的一些配置信息
    lib
        common.py     存放一些通用的数据，公用的功能
    core              用户视图层   用于和用户打交道，可以接受用户的输入，将逻辑层的结果返回给用户
        src.py
    interface        逻辑层   作为视图层和数据层的桥梁
        user_interface.py
    db               数据层   存取数据的
        db_handle.py

请问我的程序从哪里开始运行的？bin/start.py

用户视图层  core/src.py
    注册功能
    登录功能
    查看余额
    提现功能
    还款功能
    转账功能
    查看流水
1
今天的任务
    从0开始完成项目的流程
    三层结构的划分
    目录结构的搭建
    启动文件 start.py 的代码编写
    视图层  core/src.py 中run函数的编写

先回顾一下昨天做的事情
1. 从0开始完成一个项目  我们要经历的几个阶段
    需求分析   得到需求文档
    内部讨论   得到开发文档
    几个部分，岗位之间的分工
    后端  前端  测试  运维
2. 要做程序的结构设计
   分门别类更好的去管理
3. 通用型的架构
    三层结构
    视图层    类似于饭店的服务员
    逻辑层    类似于饭店的大堂经理
    数据层    类似于饭店的厨师
    客人 《==》服务员<===>大堂经理<===>厨师
    可扩展性更强
4. 我们这个项目的目录结构
    bin   启动文件  启动这个程序
    core  视图层
    interface 逻辑层
    db     数据层
    lib    存放公共的功能
    conf   存放配置信息
    readme.txt   说明文件

编写代码
    1. 去启动文件中编写的代码
        1. 加入sys.path这个列表，解决模块找不到的问题
            __file__  自动得到当前程序的绝对路径
            os.path.dirname()  得到上一级路径
        2. 尽可能不要将数据，路径写死，避免可能会出现路径改变了就报错的问题
    2. 视图层   用户直接打交道的一个文件
        定义一个主函数
        定义了一个字典   字典里面就对应各个功能的函数名
        实现了  根据用户不同的输入 而执行不同的函数

注册  还没搞完

思路：
    1. 接受用户的输入   比如  账户 密码 确认密码
    2. 做一些基本的小判断
        比如两次密码必须一致
    3. 如果两次密码一致， 就可以继续往下进行
        3.1 判断用户有没有注册过
        已经注册过了，那么就给提示，回到第一步
        没有注册过，就继续往下走
        3.2 没有注册过，对密码加密   ===》盐值  配置信息 (都放在了settings.py中)
        加密这个功能，在登录中也需要用到，所以是一个通用的功能，common.py中
        3.3 将需要保存的数据  保存到文件中 ===》保存在哪里  (都放在了settings.py中)
        (以账户作为文件名，一个账户的信息就是一份json文件里面的数据)
    4. 如果两次不一致，就回到第一步，继续往下

分层
    用户视图层
        1. 接受用户的输入
        2. 做一些基本的小判断
        3. 小判断判断没问题，
            交给逻辑层 去实现注册的功能
            (在另外一个模块中，定义一个函数，这个函数用来实现注册功能，要有返回值)
            得到结果，注册成功有否，提示信息
        4. 根据结果，做出不同的反应

    逻辑层
        1. 判断用户是不是存在     读取数据    db_handle.select()
        2. 如果用户存在，不能注册  提示信息
        3. 如果不存在，才能注册
        4. 对密码加密
        5. 将需要保存的数据保存起立  保存数据  db_handle.save()
    数据层
        db_handle.select(username)
        db_handle.save(data)



这个ATM 的项目  主要测试的是我们对整体的思路的掌握
重点在于对于开发项目的思路 而不是基础代码的知识点的联系

升华的感觉   一定要自己去手敲  首先看视频录播  再去针对的去手敲
整个的源代码我上传 根据你的错误 再去和源代码对比

提高的环节      以后我么真实开发项目   随着我们知识量的增加
我们敲的的太少了

有问题提问题：
    看视频录播的时候  第一  ，先屡清楚思路  然后再去看一遍我的代码
    再之后  才是自己手敲

名字取到比较长  但是一定要适应   实际开发中  名字都会是这样

第一阶段的基础语法知识点  就到这里  几天的休息  等待老师的通知 上课即可
等通知  后续的学习课程
等待通知即可

提问题
    对于我们第一阶段
        重点是在 前面的基础知识点
        知识点掌握了  再取回过来来看ATM  (提高)

有问题提问题
录播一定要多看  代码一定要多敲
视频和源代码都上传
1. 先看视频
2. 再看我的源代码
3. 才是尝试和手敲
